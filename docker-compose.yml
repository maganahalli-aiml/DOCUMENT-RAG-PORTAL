services:
  # Backend API Service
  document-portal-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: document-portal-system:enhanced-rag-v1.0
    container_name: document-portal-api
    ports:
      - "8080:8080"
    volumes:
      # Mount data directories for persistence
      - ./data:/app/data
      - ./faiss_index:/app/faiss_index
      - ./logs:/app/logs
      - ./cache:/app/cache  # Cache directory for SQLite cache
      - ./config:/app/config:ro  # Read-only config mount
    environment:
      # Core application settings
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      
      # API Keys (should be overridden via .env file)
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      
      # Cache settings
      - CACHE_TYPE=memory
      - CACHE_SIZE_LIMIT=1000
      - CACHE_TTL=3600
      
      # Performance settings
      - MAX_FILE_SIZE=52428800  # 50MB
      - MAX_TEXT_LENGTH=500000  # 500k characters
      - REQUEST_TIMEOUT=120  # 2 minutes
      
      # Security settings
      - CORS_ORIGINS=http://localhost:3001,http://localhost:80
      - API_RATE_LIMIT=100
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    # Security: run as non-root user
    user: "1000:1000"
    networks:
      - document-portal-network
    depends_on:
      - redis  # Redis cache dependency
    
  # Frontend Service
  document-portal-frontend:
    build:
      context: ./frontend/document-rag-portal
      dockerfile: Dockerfile.frontend
    image: document-portal-frontend:v1.0
    container_name: document-portal-frontend
    ports:
      - "3002:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_ENVIRONMENT=production
      - REACT_APP_ADMIN_PASSWORD=${REACT_APP_ADMIN_PASSWORD:-RagPortal092025}
      - REACT_APP_GUEST_PASSWORD=${REACT_APP_GUEST_PASSWORD:-guestRagPortal092025}
    volumes:
      - ./frontend/document-rag-portal/build:/app/build:ro
    restart: unless-stopped
    networks:
      - document-portal-network
    depends_on:
      - document-portal-api

  # Redis Cache Service (for production caching) - Optimized Build
  redis:
    build:
      context: .
      dockerfile: Dockerfile.redis
    image: document-portal-redis:optimized
    container_name: document-portal-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - document-portal-network
    # Resource limits for optimization
    deploy:
      resources:
        limits:
          memory: 300M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # NGINX Reverse Proxy for production
  nginx:
    image: nginx:alpine
    container_name: document-portal-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - document-portal-api
      - document-portal-frontend
    restart: unless-stopped
    networks:
      - document-portal-network
    profiles:
      - production

  # Development database (PostgreSQL) for advanced features - Optimized Build
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    image: document-portal-postgres:optimized
    container_name: document-portal-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=document_portal
      - POSTGRES_USER=portal_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-portal_password}
      # Optimized PostgreSQL settings for smaller footprint
      - POSTGRES_INITDB_ARGS=--data-checksums --encoding=UTF8 --locale=C
      - POSTGRES_HOST_AUTH_METHOD=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portal_user -d document_portal"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - document-portal-network
    # Resource limits for optimization
    deploy:
      resources:
        limits:
          memory: 300M
          cpus: '1.0'
        reservations:
          memory: 200M
          cpus: '0.5'

  # Monitoring and Observability (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: document-portal-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - document-portal-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: document-portal-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - document-portal-network
    profiles:
      - monitoring

volumes:
  # Persistent data volumes
  document_data:
    driver: local
  faiss_indices:
    driver: local
  app_logs:
    driver: local
  cache_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  document-portal-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
